[{"content":"什么是仿射密码？ 仿射密码是一种替换密码（Substitution Cipher），它是凯撒密码的扩展，引入了更为复杂的数学运算。与凯撒密码仅仅通过加法进行位移不同，仿射密码结合了乘法和加法的线性变换。其核心在于将字母表中的每个字母映射到一个数值（通常A=0，B=1，\u0026hellip;，Z=25），然后通过一个仿射函数进行变换，最后再将变换后的数值映射回字母。\n仿射密码的数学表示 仿射密码的加密和解密过程都可以用数学语言精确地描述。我们将字母表中的每个字母映射为一个数字（例如，A=0, B=1, \u0026hellip;, Z=25）。\n加密函数 仿射密码的加密函数定义为：\n$$E(x) = (ax + b) \\pmod{m}$$\n其中：\nx 代表明文字母对应的数值（0到 m-1）。 a 和 b 是密钥，其中 a 必须与 m 互质（即它们的最大公约数为1）。 m 是字母表中的字母数量，对于英文字母表，m 通常取26。 E(x) 代表密文字母对应的数值。 互质条件的重要性： a 与 m 互质是仿射密码能够成功解密的必要条件。如果 a 和 m 不互质，那么在加密过程中可能会出现不同的明文字母加密后得到相同的密文字母的情况，导致解密时无法唯一确定原始明文，从而无法正确解密。\n解密函数 解密是加密的逆过程。为了从密文 y 恢复明文 x，我们需要找到加密函数 E(x) = (ax + b) mod m 的逆函数。从加密函数可以推导出：\n$$y \\equiv ax + b \\pmod{m}$$ $$y - b \\equiv ax \\pmod{m}$$\n为了解出 x，我们需要找到 a 在模 m 意义下的乘法逆元 a^-1，即满足 (a * a^-1) mod m = 1 的 a^-1。只有当 a 与 m 互质时，a^-1 才存在。\n解密函数定义为：\n$$D(y) = a^{-1}(y - b) \\pmod{m}$$\n其中：\ny 代表密文字母对应的数值。 a^-1 是 a 在模 m 意义下的乘法逆元。 b 是加密时使用的密钥 b。 D(y) 代表解密后明文字母对应的数值。 寻找乘法逆元： 乘法逆元 a^-1 可以通过扩展欧几里得算法或穷举法（对于较小的 m 值，如26）来找到。例如，当 m=26 时，与26互质的 a 值有1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 25。每个 a 值都有其对应的唯一乘法逆元。\n示例 假设我们使用英文字母表（m=26），密钥 a=5，b=8。由于5和26互质，这是一个有效的密钥对。\n加密“HELLO”：\n将明文字母转换为数值： H -\u0026gt; 7 E -\u0026gt; 4 L -\u0026gt; 11 L -\u0026gt; 11 O -\u0026gt; 14\n应用加密函数 E(x) = (5x + 8) mod 26： H: E(7) = (57 + 8) mod 26 = (35 + 8) mod 26 = 43 mod 26 = 17 -\u0026gt; R E: E(4) = (54 + 8) mod 26 = (20 + 8) mod 26 = 28 mod 26 = 2 -\u0026gt; C L: E(11) = (511 + 8) mod 26 = (55 + 8) mod 26 = 63 mod 26 = 11 -\u0026gt; L L: E(11) = (511 + 8) mod 26 = (55 + 8) mod 26 = 63 mod 26 = 11 -\u0026gt; L O: E(14) = (5*14 + 8) mod 26 = (70 + 8) mod 26 = 78 mod 26 = 0 -\u0026gt; A\n加密后的密文是 RCLLA。\n解密“RCLLA”：\n首先找到 a=5 在模26下的乘法逆元 a^-1。我们需要找到一个数 x 使得 5x mod 26 = 1。通过计算可知 5 * 21 = 105，105 mod 26 = 1，所以 a^-1 = 21。\n将密文字母转换为数值： R -\u0026gt; 17 C -\u0026gt; 2 L -\u0026gt; 11 L -\u0026gt; 11 A -\u0026gt; 0\n应用解密函数 D(y) = 21(y - 8) mod 26： R: D(17) = 21(17 - 8) mod 26 = 21 * 9 mod 26 = 189 mod 26 = 7 -\u0026gt; H C: D(2) = 21(2 - 8) mod 26 = 21 * (-6) mod 26 = -126 mod 26 = 10 * 26 - 126 mod 26 = 4 -\u0026gt; E L: D(11) = 21(11 - 8) mod 26 = 21 * 3 mod 26 = 63 mod 26 = 11 -\u0026gt; L L: D(11) = 21(11 - 8) mod 26 = 21 * 3 mod 26 = 63 mod 26 = 11 -\u0026gt; L A: D(0) = 21(0 - 8) mod 26 = 21 * (-8) mod 26 = -168 mod 26 = 10 * 26 - 168 mod 26 = 260 - 168 mod 26 = 92 mod 26 = 14 -\u0026gt; O\n解密后的明文是 HELLO。\nC++ 代码实现 #include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;cctype\u0026gt; #include \u0026lt;numeric\u0026gt; int modInverse(int a, int m) { a = a % m; for (int x = 1; x \u0026lt; m; x++) { if ((a * x) % m == 1) { return x; } } return -1; } bool isCoprime(int a) { return std::gcd(a, 26) == 1; } std::string encryptAffine(const std::string\u0026amp; text, int a, int b) { std::string result = \u0026#34;\u0026#34;; for (char c : text) { if (isalpha(c)) { char base = islower(c) ? \u0026#39;a\u0026#39; : \u0026#39;A\u0026#39;; int x = c - base; result += static_cast\u0026lt;char\u0026gt;(((a * x + b) % 26) + base); } else { result += c; } } return result; } std::string decryptAffine(const std::string\u0026amp; text, int a, int b) { std::string result = \u0026#34;\u0026#34;; int a_inv = modInverse(a, 26); if (a_inv == -1) { // This case should ideally be handled before calling decrypt return \u0026#34;Error: Modular inverse does not exist. \u0026#39;a\u0026#39; must be coprime to 26.\u0026#34;; } for (char c : text) { if (isalpha(c)) { char base = islower(c) ? \u0026#39;a\u0026#39; : \u0026#39;A\u0026#39;; int y = c - base; // (y - b) might be negative, add 26 to make it positive before modulo result += static_cast\u0026lt;char\u0026gt;(((a_inv * (y - b + 26)) % 26) + base); } else { result += c; } } return result; } int main() { std::string text; int a, b; std::cout \u0026lt;\u0026lt; \u0026#34;请输入要加密的文本: \u0026#34;; std::getline(std::cin, text); std::cout \u0026lt;\u0026lt; \u0026#34;请输入参数 a (必须与 26 互质，例如 1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 25): \u0026#34;; std::cin \u0026gt;\u0026gt; a; // Validate \u0026#39;a\u0026#39; while (!isCoprime(a % 26)) { std::cout \u0026lt;\u0026lt; \u0026#34;参数 a 必须与 26 互质。请重新输入: \u0026#34;; std::cin \u0026gt;\u0026gt; a; } a = a % 26; std::cout \u0026lt;\u0026lt; \u0026#34;请输入参数 b (0-25): \u0026#34;; std::cin \u0026gt;\u0026gt; b; b = b % 26; std::string encrypted_text = encryptAffine(text, a, b); std::cout \u0026lt;\u0026lt; \u0026#34;加密后的文本: \u0026#34; \u0026lt;\u0026lt; encrypted_text \u0026lt;\u0026lt; std::endl; std::string decrypted_text = decryptAffine(encrypted_text, a, b); std::cout \u0026lt;\u0026lt; \u0026#34;解密后的文本: \u0026#34; \u0026lt;\u0026lt; decrypted_text \u0026lt;\u0026lt; std::endl; return 0; } 如何破解仿射密码？ 仿射密码的安全性非常低，因为它存在致命的弱点。主要有两种破解方法：\n1. 暴力破解 (Brute-force Attack) 仿射密码的密钥由两个部分组成：a 和 b。对于26个英文字母的字母表（m=26），a 必须与26互质。与26互质的数有12个（1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 25）。b 可以是0到25之间的任意整数，有26种可能。因此，仿射密码的总密钥空间大小为 12 * 26 = 312。相较于现代密码学中动辄上百位的密钥长度，312种密钥组合是一个非常小的数字，这使得仿射密码极易受到暴力破解攻击。\n攻击者可以简单地将所有可能的密钥组合全部尝试一遍，直到解密出的文本有意义为止。这个过程对于计算机来说是瞬时完成的。\n2. 频率分析 (Frequency Analysis) 仿射密码属于单表替换密码的范畴，这意味着明文中的每一个特定字母，在加密过程中都会被唯一地替换为密文中的一个特定字母。在任何一种自然语言中，不同字母的出现频率是有统计规律的。例如，在英语中，字母 E 的出现频率最高，其次是 T, A, O 等。\n攻击者可以统计密文中每个字母的出现频率，找到出现次数最多的那个密文字母。它有极大的概率对应明文中的 E。一旦确定了这一对映射关系，就可以结合数学原理推算出密钥 a 和 b，从而破解整个密码。\n仿射密码的特点与应用 仿射密码作为古典密码的一种，具有其独特的特点，这些特点也决定了其在现代密码学中的地位和应用场景。\n特点 单表替换密码： 仿射密码属于单表替换密码的范畴，明文中的每一个特定字母，在加密过程中都会被唯一地替换为密文中的一个特定字母。这种一对一的映射关系是单表替换密码的显著特征。\n与凯撒密码的关系： 凯撒密码可以看作是仿射密码的一种特殊情况。当仿射密码的密钥 a=1 时，加密函数变为 E(x) = (1 * x + b) mod m = (x + b) mod m，这正是凯撒密码的加密函数。因此，凯撒密码是仿射密码的一个子集。\n应用 尽管仿射密码在现代通信中不再用于保护敏感信息，但它在密码学教育和入门领域仍有其价值：\n密码学教学： 仿射密码是理解古典密码原理、加密解密过程以及密钥概念的优秀教学工具。通过学习仿射密码，学生可以直观地了解替换密码的工作方式，以及模运算在密码学中的应用。\n频率分析演示： 仿射密码是演示频率分析攻击原理的理想示例。教师可以通过仿射密码的加密和解密过程，向学生展示如何利用语言的统计特性来破解简单的替换密码。\n编程实践： 实现仿射密码的加密和解密算法是初学者进行密码学编程实践的良好起点。这有助于培养编程技能，并加深对密码学算法的理解。\n历史研究： 作为古典密码的一部分，仿射密码在密码学发展史上占有一席之地。研究仿射密码有助于了解密码学从简单替换到复杂算法的演变过程。\n总而言之，仿射密码虽然在实际应用中已不再具备安全性，但其在密码学教育和历史研究中仍然发挥着重要的作用，为我们理解更复杂的加密技术提供了基础。\n总结 仿射密码作为古典密码学中的一个重要组成部分，以其简洁的数学原理和直观的加密过程，为我们理解密码学的基本概念提供了宝贵的视角。它通过线性函数 E(x) = (ax + b) mod m 将明文转换为密文，并通过其逆函数 D(y) = a^-1(y - b) mod m 进行解密。其中，密钥 a 与字母表大小 m 互质是确保可逆性的关键条件。\n尽管仿射密码在现代密码学中因其极小的密钥空间和易受频率分析攻击的弱点而不再具备实际的安全性，但它在密码学教育、历史研究以及编程实践中仍然扮演着不可或缺的角色。通过学习和实现仿射密码，我们不仅能够掌握古典密码的基本原理，还能为理解更复杂的加密算法和现代密码学奠定坚实的基础。\n从凯撒密码到仿射密码，再到更复杂的加密技术，密码学的发展史是一部不断演进的攻防史。每一次加密技术的进步都伴随着破解技术的突破，反之亦然。仿射密码正是这一演进过程中的一个重要里程碑，它以其独特的数学美感和历史意义，继续在密码学领域中闪耀着光芒。\n","date":"2025-08-12T17:15:00+08:00","permalink":"http://localhost:1313/post/programmingtechnology/classicalcryptography/affinecipher/","title":"仿射密码"},{"content":"什么是凯撒密码？ 凯撒密码是一种替换密码（Substitution Cipher），也被称为移位密码（Shift Cipher）。它的加密过程非常简单：将明文中的每一个字母，用字母表上固定距离的另一个字母来替换。\n这个“固定的距离”就是加密的密钥（Key）。\n例如，如果我们选择的密钥是 3，那么：\n字母 A 会被替换成字母表中向后移动 3 位的 D。 字母 B 会被替换成 E。 \u0026hellip; 字母 X 会被替换成 A（因为 X -\u0026gt; Y -\u0026gt; Z -\u0026gt; A，字母表是循环的）。 字母 Y 会被替换成 B。 字母 Z 会被替换成 C。 这个过程就像是将整个字母表向左平移了 3 位，形成了一个新的对应关系。\n加密示例 (密钥 = 3):\n明文 (Plaintext): HELLO WORLD 密文 (Ciphertext): KHOOR ZRUOG 凯撒密码的数学表示 尽管凯撒密码很简单，但我们依然可以用数学语言来精确地描述它。我们将字母表中的每个字母映射为一个数字（例如，A=0, B=1, \u0026hellip;, Z=25）。\n设：\nP 为明文字母对应的数字。 C 为密文字母对应的数字。 k 为密钥（位移量）。 那么，加密过程可以表示为： $$ C = (P + k) \\pmod{26} $$\n解密过程则是加密的逆运算，即向前移动 k 位： $$ P = (C - k) \\pmod{26} $$\n这里的 mod 26 (模26) 运算是关键，它完美地实现了字母表的循环。例如，当加密 X (23) 且密钥为 3 时： C = (23 + 3) mod 26 = 26 mod 26 = 0，对应的字母是 A。\n当解密 A (0) 且密钥为 3 时： P = (0 - 3) mod 26 = -3 mod 26。在模运算中，-3 和 23 是同余的，所以结果是 23，对应的字母是 X。\n如何破解凯撒密码？ 凯撒密码的安全性极低，因为它存在致命的弱点。主要有两种破解方法：\n1. 暴力破解 (Brute-force Attack) 由于英文字母只有 26 个，所以可能的密钥也只有 25 种（密钥为 0 或 26 没有意义，因为明文和密文会一样）。攻击者可以简单地将所有可能的密钥（从 1 到 25）全部尝试一遍，直到解密出的文本有意义为止。这个过程对于计算机来说是瞬时完成的。\n2. 频率分析 (Frequency Analysis) 在任何一种自然语言中，不同字母的出现频率是有统计规律的。例如，在英语中，字母 E 的出现频率最高，其次是 T, A, O 等。\n攻击者可以统计密文中每个字母的出现频率，找到出现次数最多的那个密文字母。它有极大的概率对应明文中的 E。一旦确定了这一对映射关系（比如密文 H 对应明文 E），就可以立即推算出密钥 k（从 E 到 H 的位移是 3），从而破解整个密码。\nC++ 代码实现 下面是一个完整的 C++ 程序，它实现了凯撒密码的加密和解密功能。代码结构清晰，并包含了详细的注释。\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;cctype\u0026gt; std::string caesarEncrypt(const std::string\u0026amp; text, int shift); std::string caesarDecrypt(const std::string\u0026amp; text, int shift); int main() { std::string message; int shift; std::cout \u0026lt;\u0026lt; \u0026#34;=====================================\u0026#34; \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34; 凯撒密码加密/解密程序\u0026#34; \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;=====================================\u0026#34; \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;\\n请输入要处理的消息: \u0026#34;; std::getline(std::cin, message); std::cout \u0026lt;\u0026lt; \u0026#34;请输入移位量 (0-25 之间的整数): \u0026#34;; std::cin \u0026gt;\u0026gt; shift; shift = shift % 26; if (shift \u0026lt; 0) { shift += 26; } std::string encryptedMessage = caesarEncrypt(message, shift); std::cout \u0026lt;\u0026lt; \u0026#34;\\n加密后的密文是: \u0026#34; \u0026lt;\u0026lt; encryptedMessage \u0026lt;\u0026lt; std::endl; std::string decryptedMessage = caesarDecrypt(encryptedMessage, shift); std::cout \u0026lt;\u0026lt; \u0026#34;解密后的明文是: \u0026#34; \u0026lt;\u0026lt; decryptedMessage \u0026lt;\u0026lt; std::endl; return 0; } /** * @brief 对给定的文本进行凯撒加密 * @param text 要加密的明文 * @param shift 移位密钥 (0-25) * @return 加密后的密文 */ std::string caesarEncrypt(const std::string\u0026amp; text, int shift) { std::string result = \u0026#34;\u0026#34;; for (char c : text) { if (isalpha(c)) { char base = isupper(c) ? \u0026#39;A\u0026#39; : \u0026#39;a\u0026#39;; // Apply encryption formula: C = (P + k) % 26 result += static_cast\u0026lt;char\u0026gt;((c - base + shift) % 26 + base); } else { result += c; } } return result; } /** * @brief 对给定的文本进行凯撒解密 * @param text 要解密的密文 * @param shift 移位密钥 (0-25) * @return 解密后的明文 */ std::string caesarDecrypt(const std::string\u0026amp; text, int shift) { std::string result = \u0026#34;\u0026#34;; for (char c : text) { if (isalpha(c)) { char base = isupper(c) ? \u0026#39;A\u0026#39; : \u0026#39;a\u0026#39;; result += static_cast\u0026lt;char\u0026gt;((c - base - shift + 26) % 26 + base); } else { result += c; } } return result; } ","date":"2025-08-11T16:34:53+08:00","permalink":"http://localhost:1313/post/programmingtechnology/classicalcryptography/caesarcipher/","title":"凯撒密码"}]